syntax = "proto3";
option optimize_for = LITE_RUNTIME;

package dac_proto;

enum DacMode {
  DAC_MODE_STATIC = 0;
  DAC_MODE_PERIODIC = 1;
  DAC_MODE_STREAMING = 2;
}

message DacConfigRequest {
  uint32 request_id = 1;
  bool config_ch0 = 2;
  bool config_ch1 = 3;
  DacMode mode_ch0 = 4;
  DacMode mode_ch1 = 5;
  uint32 sampling_rate_ch0 = 6;
  uint32 sampling_rate_ch1 = 7;
  uint32 periodic_samples_ch0 = 8;
  uint32 periodic_samples_ch1 = 9;
}

enum DacConfigStatusCode {
  CFG_NOT_INIT = 0;
  CFG_SUCCESS = 1;
  CFG_INVLAID_CONFIG_FLAGS = 2;
  CFG_INVALID_MODE = 3;
  CFG_INVALID_SAMPLING_RATE = 4;
  CFG_INVALID_PERIODIC_SAMPLES = 5;
  CFG_INTERFACE_ERROR = 6;
}

message DacConfigStatus {
  uint32 request_id = 1;
  DacConfigStatusCode status_code = 2;
}

message DacDataRequest {
  uint32 request_id = 1;
  bool run_ch0 = 2;
  bool run_ch1 = 3;
  bytes data_ch0 = 4;
  bytes data_ch1 = 5;
}

enum DacDataStatusCode {
  DATA_NOT_INIT = 0;
  DATA_SUCCESS = 1;
  DATA_BAD_REQUEST = 2;
  DATA_BUFFER_OVERFLOW = 3;
  DATA_INTERFACE_ERROR = 4;
}

message DacDataStatus {
  uint32 request_id = 1;
  DacDataStatusCode status_code = 2;
  uint32 queue_space = 3;
  uint32 buffer_space_ch0 = 4;
  uint32 buffer_space_ch1 = 5;
}

message DacNotification {
  bool buffer_underrun_ch0 = 1;
  bool buffer_underrun_ch1 = 2;
  uint32 queue_space = 3;
  uint32 buffer_space_ch0 = 4;
  uint32 buffer_space_ch1 = 5;
}

message DacMsg {
  uint32 sequence_number = 1;
  oneof msg {
    DacConfigRequest config_request = 2;
    DacConfigStatus config_status = 3;

    DacDataRequest data_request = 4;
    DacDataStatus data_status = 5;
    DacNotification notification = 6;
  }
}
