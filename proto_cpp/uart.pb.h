// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_uart_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uart_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_uart_2eproto;
namespace uart_proto {
class UartConfig;
struct UartConfigDefaultTypeInternal;
extern UartConfigDefaultTypeInternal _UartConfig_default_instance_;
class UartReceive;
struct UartReceiveDefaultTypeInternal;
extern UartReceiveDefaultTypeInternal _UartReceive_default_instance_;
class UartTransmit;
struct UartTransmitDefaultTypeInternal;
extern UartTransmitDefaultTypeInternal _UartTransmit_default_instance_;
}  // namespace uart_proto
PROTOBUF_NAMESPACE_OPEN
template <>
::uart_proto::UartConfig* Arena::CreateMaybeMessage<::uart_proto::UartConfig>(Arena*);
template <>
::uart_proto::UartReceive* Arena::CreateMaybeMessage<::uart_proto::UartReceive>(Arena*);
template <>
::uart_proto::UartTransmit* Arena::CreateMaybeMessage<::uart_proto::UartTransmit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace uart_proto {
enum Peripheral : int {
  UART1 = 0,
  UART2 = 1,
  Peripheral_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Peripheral_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Peripheral_IsValid(int value);
constexpr Peripheral Peripheral_MIN = static_cast<Peripheral>(0);
constexpr Peripheral Peripheral_MAX = static_cast<Peripheral>(1);
constexpr int Peripheral_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Peripheral_descriptor();
template <typename T>
const std::string& Peripheral_Name(T value) {
  static_assert(std::is_same<T, Peripheral>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Peripheral_Name().");
  return Peripheral_Name(static_cast<Peripheral>(value));
}
template <>
inline const std::string& Peripheral_Name(Peripheral value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Peripheral_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Peripheral_Parse(absl::string_view name, Peripheral* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Peripheral>(
      Peripheral_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UartConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uart_proto.UartConfig) */ {
 public:
  inline UartConfig() : UartConfig(nullptr) {}
  ~UartConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UartConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartConfig(const UartConfig& from);
  UartConfig(UartConfig&& from) noexcept
    : UartConfig() {
    *this = ::std::move(from);
  }

  inline UartConfig& operator=(const UartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartConfig& operator=(UartConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UartConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartConfig* internal_default_instance() {
    return reinterpret_cast<const UartConfig*>(
               &_UartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UartConfig& a, UartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UartConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UartConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UartConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UartConfig& from) {
    UartConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uart_proto.UartConfig";
  }
  protected:
  explicit UartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeripheralFieldNumber = 1,
    kBaudRateFieldNumber = 2,
  };
  // .uart_proto.Peripheral peripheral = 1;
  void clear_peripheral() ;
  ::uart_proto::Peripheral peripheral() const;
  void set_peripheral(::uart_proto::Peripheral value);

  private:
  ::uart_proto::Peripheral _internal_peripheral() const;
  void _internal_set_peripheral(::uart_proto::Peripheral value);

  public:
  // uint32 baud_rate = 2;
  void clear_baud_rate() ;
  ::uint32_t baud_rate() const;
  void set_baud_rate(::uint32_t value);

  private:
  ::uint32_t _internal_baud_rate() const;
  void _internal_set_baud_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:uart_proto.UartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int peripheral_;
    ::uint32_t baud_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_2eproto;
};// -------------------------------------------------------------------

class UartTransmit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uart_proto.UartTransmit) */ {
 public:
  inline UartTransmit() : UartTransmit(nullptr) {}
  ~UartTransmit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UartTransmit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartTransmit(const UartTransmit& from);
  UartTransmit(UartTransmit&& from) noexcept
    : UartTransmit() {
    *this = ::std::move(from);
  }

  inline UartTransmit& operator=(const UartTransmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartTransmit& operator=(UartTransmit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UartTransmit& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartTransmit* internal_default_instance() {
    return reinterpret_cast<const UartTransmit*>(
               &_UartTransmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UartTransmit& a, UartTransmit& b) {
    a.Swap(&b);
  }
  inline void Swap(UartTransmit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartTransmit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UartTransmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UartTransmit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UartTransmit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UartTransmit& from) {
    UartTransmit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartTransmit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uart_proto.UartTransmit";
  }
  protected:
  explicit UartTransmit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeripheralFieldNumber = 1,
  };
  // .uart_proto.Peripheral peripheral = 1;
  void clear_peripheral() ;
  ::uart_proto::Peripheral peripheral() const;
  void set_peripheral(::uart_proto::Peripheral value);

  private:
  ::uart_proto::Peripheral _internal_peripheral() const;
  void _internal_set_peripheral(::uart_proto::Peripheral value);

  public:
  // @@protoc_insertion_point(class_scope:uart_proto.UartTransmit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int peripheral_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_2eproto;
};// -------------------------------------------------------------------

class UartReceive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uart_proto.UartReceive) */ {
 public:
  inline UartReceive() : UartReceive(nullptr) {}
  ~UartReceive() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UartReceive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartReceive(const UartReceive& from);
  UartReceive(UartReceive&& from) noexcept
    : UartReceive() {
    *this = ::std::move(from);
  }

  inline UartReceive& operator=(const UartReceive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartReceive& operator=(UartReceive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UartReceive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartReceive* internal_default_instance() {
    return reinterpret_cast<const UartReceive*>(
               &_UartReceive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UartReceive& a, UartReceive& b) {
    a.Swap(&b);
  }
  inline void Swap(UartReceive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartReceive* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UartReceive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UartReceive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UartReceive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UartReceive& from) {
    UartReceive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartReceive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uart_proto.UartReceive";
  }
  protected:
  explicit UartReceive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeripheralFieldNumber = 1,
  };
  // .uart_proto.Peripheral peripheral = 1;
  void clear_peripheral() ;
  ::uart_proto::Peripheral peripheral() const;
  void set_peripheral(::uart_proto::Peripheral value);

  private:
  ::uart_proto::Peripheral _internal_peripheral() const;
  void _internal_set_peripheral(::uart_proto::Peripheral value);

  public:
  // @@protoc_insertion_point(class_scope:uart_proto.UartReceive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int peripheral_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UartConfig

// .uart_proto.Peripheral peripheral = 1;
inline void UartConfig::clear_peripheral() {
  _impl_.peripheral_ = 0;
}
inline ::uart_proto::Peripheral UartConfig::peripheral() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartConfig.peripheral)
  return _internal_peripheral();
}
inline void UartConfig::set_peripheral(::uart_proto::Peripheral value) {
   _internal_set_peripheral(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartConfig.peripheral)
}
inline ::uart_proto::Peripheral UartConfig::_internal_peripheral() const {
  return static_cast<::uart_proto::Peripheral>(_impl_.peripheral_);
}
inline void UartConfig::_internal_set_peripheral(::uart_proto::Peripheral value) {
  ;
  _impl_.peripheral_ = value;
}

// uint32 baud_rate = 2;
inline void UartConfig::clear_baud_rate() {
  _impl_.baud_rate_ = 0u;
}
inline ::uint32_t UartConfig::baud_rate() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartConfig.baud_rate)
  return _internal_baud_rate();
}
inline void UartConfig::set_baud_rate(::uint32_t value) {
  _internal_set_baud_rate(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartConfig.baud_rate)
}
inline ::uint32_t UartConfig::_internal_baud_rate() const {
  return _impl_.baud_rate_;
}
inline void UartConfig::_internal_set_baud_rate(::uint32_t value) {
  ;
  _impl_.baud_rate_ = value;
}

// -------------------------------------------------------------------

// UartTransmit

// .uart_proto.Peripheral peripheral = 1;
inline void UartTransmit::clear_peripheral() {
  _impl_.peripheral_ = 0;
}
inline ::uart_proto::Peripheral UartTransmit::peripheral() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartTransmit.peripheral)
  return _internal_peripheral();
}
inline void UartTransmit::set_peripheral(::uart_proto::Peripheral value) {
   _internal_set_peripheral(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartTransmit.peripheral)
}
inline ::uart_proto::Peripheral UartTransmit::_internal_peripheral() const {
  return static_cast<::uart_proto::Peripheral>(_impl_.peripheral_);
}
inline void UartTransmit::_internal_set_peripheral(::uart_proto::Peripheral value) {
  ;
  _impl_.peripheral_ = value;
}

// -------------------------------------------------------------------

// UartReceive

// .uart_proto.Peripheral peripheral = 1;
inline void UartReceive::clear_peripheral() {
  _impl_.peripheral_ = 0;
}
inline ::uart_proto::Peripheral UartReceive::peripheral() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartReceive.peripheral)
  return _internal_peripheral();
}
inline void UartReceive::set_peripheral(::uart_proto::Peripheral value) {
   _internal_set_peripheral(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartReceive.peripheral)
}
inline ::uart_proto::Peripheral UartReceive::_internal_peripheral() const {
  return static_cast<::uart_proto::Peripheral>(_impl_.peripheral_);
}
inline void UartReceive::_internal_set_peripheral(::uart_proto::Peripheral value) {
  ;
  _impl_.peripheral_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace uart_proto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::uart_proto::Peripheral> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::uart_proto::Peripheral>() {
  return ::uart_proto::Peripheral_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh
