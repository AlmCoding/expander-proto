// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_uart_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uart_2eproto {
  static const ::uint32_t offsets[];
};
namespace uart_proto {
class UartConfig;
struct UartConfigDefaultTypeInternal;
extern UartConfigDefaultTypeInternal _UartConfig_default_instance_;
class UartData;
struct UartDataDefaultTypeInternal;
extern UartDataDefaultTypeInternal _UartData_default_instance_;
}  // namespace uart_proto
PROTOBUF_NAMESPACE_OPEN
template <>
::uart_proto::UartConfig* Arena::CreateMaybeMessage<::uart_proto::UartConfig>(Arena*);
template <>
::uart_proto::UartData* Arena::CreateMaybeMessage<::uart_proto::UartData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace uart_proto {
enum UartId : int {
  UART1 = 0,
  UART2 = 1,
  UartId_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UartId_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UartId_IsValid(int value);
constexpr UartId UartId_MIN = static_cast<UartId>(0);
constexpr UartId UartId_MAX = static_cast<UartId>(1);
constexpr int UartId_ARRAYSIZE = 1 + 1;
const std::string& UartId_Name(UartId value);
template <typename T>
const std::string& UartId_Name(T value) {
  static_assert(std::is_same<T, UartId>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UartId_Name().");
  return UartId_Name(static_cast<UartId>(value));
}
const std::string& UartId_Name(UartId value);
bool UartId_Parse(absl::string_view name, UartId* value);

// ===================================================================


// -------------------------------------------------------------------

class UartConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:uart_proto.UartConfig) */ {
 public:
  inline UartConfig() : UartConfig(nullptr) {}
  ~UartConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UartConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartConfig(const UartConfig& from);
  UartConfig(UartConfig&& from) noexcept
    : UartConfig() {
    *this = ::std::move(from);
  }

  inline UartConfig& operator=(const UartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartConfig& operator=(UartConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UartConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartConfig* internal_default_instance() {
    return reinterpret_cast<const UartConfig*>(
               &_UartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UartConfig& a, UartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UartConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UartConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UartConfig& from);
  void MergeFrom(const UartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UartConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uart_proto.UartConfig";
  }
  protected:
  explicit UartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUartIdFieldNumber = 1,
    kBaudRateFieldNumber = 2,
  };
  // .uart_proto.UartId uart_id = 1;
  void clear_uart_id() ;
  ::uart_proto::UartId uart_id() const;
  void set_uart_id(::uart_proto::UartId value);

  private:
  ::uart_proto::UartId _internal_uart_id() const;
  void _internal_set_uart_id(::uart_proto::UartId value);

  public:
  // uint32 baud_rate = 2;
  void clear_baud_rate() ;
  ::uint32_t baud_rate() const;
  void set_baud_rate(::uint32_t value);

  private:
  ::uint32_t _internal_baud_rate() const;
  void _internal_set_baud_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:uart_proto.UartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int uart_id_;
    ::uint32_t baud_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_2eproto;
};// -------------------------------------------------------------------

class UartData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:uart_proto.UartData) */ {
 public:
  inline UartData() : UartData(nullptr) {}
  ~UartData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UartData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UartData(const UartData& from);
  UartData(UartData&& from) noexcept
    : UartData() {
    *this = ::std::move(from);
  }

  inline UartData& operator=(const UartData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartData& operator=(UartData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UartData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UartData* internal_default_instance() {
    return reinterpret_cast<const UartData*>(
               &_UartData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UartData& a, UartData& b) {
    a.Swap(&b);
  }
  inline void Swap(UartData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UartData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UartData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UartData& from);
  void MergeFrom(const UartData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UartData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uart_proto.UartData";
  }
  protected:
  explicit UartData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kUartIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .uart_proto.UartId uart_id = 1;
  void clear_uart_id() ;
  ::uart_proto::UartId uart_id() const;
  void set_uart_id(::uart_proto::UartId value);

  private:
  ::uart_proto::UartId _internal_uart_id() const;
  void _internal_set_uart_id(::uart_proto::UartId value);

  public:
  // uint32 size = 2;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:uart_proto.UartData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int uart_id_;
    ::uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UartConfig

// .uart_proto.UartId uart_id = 1;
inline void UartConfig::clear_uart_id() {
  _impl_.uart_id_ = 0;
}
inline ::uart_proto::UartId UartConfig::uart_id() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartConfig.uart_id)
  return _internal_uart_id();
}
inline void UartConfig::set_uart_id(::uart_proto::UartId value) {
   _internal_set_uart_id(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartConfig.uart_id)
}
inline ::uart_proto::UartId UartConfig::_internal_uart_id() const {
  return static_cast<::uart_proto::UartId>(_impl_.uart_id_);
}
inline void UartConfig::_internal_set_uart_id(::uart_proto::UartId value) {
  ;
  _impl_.uart_id_ = value;
}

// uint32 baud_rate = 2;
inline void UartConfig::clear_baud_rate() {
  _impl_.baud_rate_ = 0u;
}
inline ::uint32_t UartConfig::baud_rate() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartConfig.baud_rate)
  return _internal_baud_rate();
}
inline void UartConfig::set_baud_rate(::uint32_t value) {
  _internal_set_baud_rate(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartConfig.baud_rate)
}
inline ::uint32_t UartConfig::_internal_baud_rate() const {
  return _impl_.baud_rate_;
}
inline void UartConfig::_internal_set_baud_rate(::uint32_t value) {
  ;
  _impl_.baud_rate_ = value;
}

// -------------------------------------------------------------------

// UartData

// .uart_proto.UartId uart_id = 1;
inline void UartData::clear_uart_id() {
  _impl_.uart_id_ = 0;
}
inline ::uart_proto::UartId UartData::uart_id() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartData.uart_id)
  return _internal_uart_id();
}
inline void UartData::set_uart_id(::uart_proto::UartId value) {
   _internal_set_uart_id(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartData.uart_id)
}
inline ::uart_proto::UartId UartData::_internal_uart_id() const {
  return static_cast<::uart_proto::UartId>(_impl_.uart_id_);
}
inline void UartData::_internal_set_uart_id(::uart_proto::UartId value) {
  ;
  _impl_.uart_id_ = value;
}

// uint32 size = 2;
inline void UartData::clear_size() {
  _impl_.size_ = 0u;
}
inline ::uint32_t UartData::size() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartData.size)
  return _internal_size();
}
inline void UartData::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:uart_proto.UartData.size)
}
inline ::uint32_t UartData::_internal_size() const {
  return _impl_.size_;
}
inline void UartData::_internal_set_size(::uint32_t value) {
  ;
  _impl_.size_ = value;
}

// bytes data = 3;
inline void UartData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& UartData::data() const {
  // @@protoc_insertion_point(field_get:uart_proto.UartData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UartData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uart_proto.UartData.data)
}
inline std::string* UartData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:uart_proto.UartData.data)
  return _s;
}
inline const std::string& UartData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void UartData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* UartData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* UartData::release_data() {
  // @@protoc_insertion_point(field_release:uart_proto.UartData.data)
  return _impl_.data_.Release();
}
inline void UartData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uart_proto.UartData.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace uart_proto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::uart_proto::UartId> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_uart_2eproto_2epb_2eh
