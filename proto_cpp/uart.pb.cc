// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uart.proto

#include "uart.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace uart_proto {
template <typename>
PROTOBUF_CONSTEXPR UartConfig::UartConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uart_id_)*/ 0

  , /*decltype(_impl_.baud_rate_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UartConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UartConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UartConfigDefaultTypeInternal() {}
  union {
    UartConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UartConfigDefaultTypeInternal _UartConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UartData::UartData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uart_id_)*/ 0

  , /*decltype(_impl_.size_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UartDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UartDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UartDataDefaultTypeInternal() {}
  union {
    UartData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UartDataDefaultTypeInternal _UartData_default_instance_;
}  // namespace uart_proto
namespace uart_proto {
bool UartId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    UartId_strings[2] = {};

static const char UartId_names[] = {
    "UART1"
    "UART2"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UartId_entries[] =
    {
        {{&UartId_names[0], 5}, 0},
        {{&UartId_names[5], 5}, 1},
};

static const int UartId_entries_by_number[] = {
    0,  // 0 -> UART1
    1,  // 1 -> UART2
};

const std::string& UartId_Name(UartId value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UartId_entries, UartId_entries_by_number,
          2, UartId_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UartId_entries, UartId_entries_by_number, 2,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : UartId_strings[idx].get();
}

bool UartId_Parse(absl::string_view name, UartId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UartId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<UartId>(int_value);
  }
  return success;
}
// ===================================================================

class UartConfig::_Internal {
 public:
};

UartConfig::UartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uart_proto.UartConfig)
}
UartConfig::UartConfig(const UartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uart_proto.UartConfig)
}

inline void UartConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.uart_id_) { 0 }

    , decltype(_impl_.baud_rate_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UartConfig::~UartConfig() {
  // @@protoc_insertion_point(destructor:uart_proto.UartConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UartConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UartConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:uart_proto.UartConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uart_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.baud_rate_) -
      reinterpret_cast<char*>(&_impl_.uart_id_)) + sizeof(_impl_.baud_rate_));
  _internal_metadata_.Clear<std::string>();
}

const char* UartConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uart_proto.UartId uart_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_uart_id(static_cast<::uart_proto::UartId>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 baud_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.baud_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UartConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uart_proto.UartConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uart_proto.UartId uart_id = 1;
  if (this->_internal_uart_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_uart_id(), target);
  }

  // uint32 baud_rate = 2;
  if (this->_internal_baud_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_baud_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uart_proto.UartConfig)
  return target;
}

::size_t UartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uart_proto.UartConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uart_proto.UartId uart_id = 1;
  if (this->_internal_uart_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_uart_id());
  }

  // uint32 baud_rate = 2;
  if (this->_internal_baud_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_baud_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UartConfig*>(
      &from));
}

void UartConfig::MergeFrom(const UartConfig& from) {
  UartConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:uart_proto.UartConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uart_id() != 0) {
    _this->_internal_set_uart_id(from._internal_uart_id());
  }
  if (from._internal_baud_rate() != 0) {
    _this->_internal_set_baud_rate(from._internal_baud_rate());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UartConfig::CopyFrom(const UartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uart_proto.UartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartConfig::IsInitialized() const {
  return true;
}

void UartConfig::InternalSwap(UartConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartConfig, _impl_.baud_rate_)
      + sizeof(UartConfig::_impl_.baud_rate_)
      - PROTOBUF_FIELD_OFFSET(UartConfig, _impl_.uart_id_)>(
          reinterpret_cast<char*>(&_impl_.uart_id_),
          reinterpret_cast<char*>(&other->_impl_.uart_id_));
}

std::string UartConfig::GetTypeName() const {
  return "uart_proto.UartConfig";
}

// ===================================================================

class UartData::_Internal {
 public:
};

UartData::UartData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uart_proto.UartData)
}
UartData::UartData(const UartData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UartData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.uart_id_) {}

    , decltype(_impl_.size_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uart_id_, &from._impl_.uart_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.uart_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:uart_proto.UartData)
}

inline void UartData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.uart_id_) { 0 }

    , decltype(_impl_.size_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UartData::~UartData() {
  // @@protoc_insertion_point(destructor:uart_proto.UartData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UartData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void UartData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UartData::Clear() {
// @@protoc_insertion_point(message_clear_start:uart_proto.UartData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.uart_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.uart_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<std::string>();
}

const char* UartData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uart_proto.UartId uart_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_uart_id(static_cast<::uart_proto::UartId>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UartData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uart_proto.UartData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uart_proto.UartId uart_id = 1;
  if (this->_internal_uart_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_uart_id(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_size(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uart_proto.UartData)
  return target;
}

::size_t UartData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uart_proto.UartData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .uart_proto.UartId uart_id = 1;
  if (this->_internal_uart_id() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_uart_id());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UartData*>(
      &from));
}

void UartData::MergeFrom(const UartData& from) {
  UartData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:uart_proto.UartData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_uart_id() != 0) {
    _this->_internal_set_uart_id(from._internal_uart_id());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UartData::CopyFrom(const UartData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uart_proto.UartData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartData::IsInitialized() const {
  return true;
}

void UartData::InternalSwap(UartData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartData, _impl_.size_)
      + sizeof(UartData::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(UartData, _impl_.uart_id_)>(
          reinterpret_cast<char*>(&_impl_.uart_id_),
          reinterpret_cast<char*>(&other->_impl_.uart_id_));
}

std::string UartData::GetTypeName() const {
  return "uart_proto.UartData";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace uart_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uart_proto::UartConfig*
Arena::CreateMaybeMessage< ::uart_proto::UartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uart_proto::UartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::uart_proto::UartData*
Arena::CreateMaybeMessage< ::uart_proto::UartData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uart_proto::UartData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
